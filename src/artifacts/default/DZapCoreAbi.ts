import { Abi } from 'viem';

export const abi: Abi = [
  { type: 'error', name: 'CannotAuthorizeSelf', inputs: [] },
  { type: 'error', name: 'OnlyContractOwner', inputs: [] },
  {
    type: 'error',
    name: 'BridgeCallFailed',
    inputs: [{ type: 'bytes', name: 'reason' }],
  },
  { type: 'error', name: 'CannotBridgeToSameNetwork', inputs: [] },
  { type: 'error', name: 'InformationMismatch', inputs: [] },
  {
    type: 'error',
    name: 'InsufficientBalance',
    inputs: [
      { type: 'uint256', name: 'amount' },
      { type: 'uint256', name: 'contractBalance' },
    ],
  },
  { type: 'error', name: 'IntegratorNotAllowed', inputs: [] },
  { type: 'error', name: 'InvalidAmount', inputs: [] },
  { type: 'error', name: 'InvalidLength', inputs: [] },
  { type: 'error', name: 'InvalidPermit', inputs: [] },
  { type: 'error', name: 'InvalidPermitData', inputs: [] },
  { type: 'error', name: 'NativeTransferFailed', inputs: [] },
  { type: 'error', name: 'NoTransferToNullAddress', inputs: [] },
  { type: 'error', name: 'NotAContract', inputs: [] },
  { type: 'error', name: 'NullAddrIsNotAValidSpender', inputs: [] },
  { type: 'error', name: 'NullAddrIsNotAnERC20Token', inputs: [] },
  {
    type: 'error',
    name: 'UnAuthorizedCall',
    inputs: [{ type: 'address' }],
  },
  { type: 'error', name: 'CannotBridgeToSameNetwork', inputs: [] },
  { type: 'error', name: 'InformationMismatch', inputs: [] },
  {
    type: 'error',
    name: 'InsufficientBalance',
    inputs: [
      { type: 'uint256', name: 'amount' },
      { type: 'uint256', name: 'contractBalance' },
    ],
  },
  { type: 'error', name: 'IntegratorNotAllowed', inputs: [] },
  { type: 'error', name: 'InvalidAmount', inputs: [] },
  { type: 'error', name: 'InvalidLength', inputs: [] },
  { type: 'error', name: 'InvalidPermit', inputs: [] },
  { type: 'error', name: 'InvalidPermitData', inputs: [] },
  { type: 'error', name: 'NativeTransferFailed', inputs: [] },
  { type: 'error', name: 'NoTransferToNullAddress', inputs: [] },
  { type: 'error', name: 'NullAddrIsNotAnERC20Token', inputs: [] },
  {
    type: 'error',
    name: 'BridgeNotAdded',
    inputs: [{ type: 'address' }],
  },
  { type: 'error', name: 'CannotAuthorizeSelf', inputs: [] },
  { type: 'error', name: 'UnAuthorized', inputs: [] },
  {
    type: 'error',
    name: 'BridgeCallFailed',
    inputs: [{ type: 'bytes', name: 'reason' }],
  },
  { type: 'error', name: 'CannotBridgeToSameNetwork', inputs: [] },
  { type: 'error', name: 'ContractCallNotAllowed', inputs: [] },
  { type: 'error', name: 'InformationMismatch', inputs: [] },
  {
    type: 'error',
    name: 'InsufficientBalance',
    inputs: [
      { type: 'uint256', name: 'amount' },
      { type: 'uint256', name: 'contractBalance' },
    ],
  },
  { type: 'error', name: 'IntegratorNotAllowed', inputs: [] },
  { type: 'error', name: 'InvalidAmount', inputs: [] },
  { type: 'error', name: 'InvalidContract', inputs: [] },
  { type: 'error', name: 'InvalidLength', inputs: [] },
  { type: 'error', name: 'InvalidPermit', inputs: [] },
  { type: 'error', name: 'InvalidPermitData', inputs: [] },
  { type: 'error', name: 'InvalidSwapDetails', inputs: [] },
  { type: 'error', name: 'NativeTransferFailed', inputs: [] },
  { type: 'error', name: 'NoSwapFromZeroBalance', inputs: [] },
  { type: 'error', name: 'NoTransferToNullAddress', inputs: [] },
  { type: 'error', name: 'NotAContract', inputs: [] },
  { type: 'error', name: 'NullAddrIsNotAValidSpender', inputs: [] },
  { type: 'error', name: 'NullAddrIsNotAnERC20Token', inputs: [] },
  {
    type: 'error',
    name: 'SlippageTooLow',
    inputs: [
      { type: 'uint256', name: 'minAmount' },
      { type: 'uint256', name: 'returnAmount' },
    ],
  },
  {
    type: 'error',
    name: 'SwapCallFailed',
    inputs: [{ type: 'bytes', name: 'reason' }],
  },
  {
    type: 'error',
    name: 'UnAuthorizedCall',
    inputs: [{ type: 'address' }],
  },
  { type: 'error', name: 'CannotAuthorizeSelf', inputs: [] },
  { type: 'error', name: 'InvalidContract', inputs: [] },
  { type: 'error', name: 'UnAuthorized', inputs: [] },
  { type: 'error', name: 'CalldataEmptyButInitNotZero', inputs: [] },
  { type: 'error', name: 'FacetAddressIsNotZero', inputs: [] },
  { type: 'error', name: 'FacetAddressIsZero', inputs: [] },
  { type: 'error', name: 'FacetContainsNoCode', inputs: [] },
  { type: 'error', name: 'FunctionAlreadyExists', inputs: [] },
  { type: 'error', name: 'FunctionDoesNotExist', inputs: [] },
  { type: 'error', name: 'FunctionIsImmutable', inputs: [] },
  { type: 'error', name: 'IncorrectFacetCutAction', inputs: [] },
  {
    type: 'error',
    name: 'InitReverted',
    inputs: [{ type: 'bytes', name: 'reason' }],
  },
  { type: 'error', name: 'InitZeroButCalldataNotEmpty', inputs: [] },
  { type: 'error', name: 'NoSelectorsInFace', inputs: [] },
  { type: 'error', name: 'OnlyContractOwner', inputs: [] },
  { type: 'error', name: 'AlreadyInitialized', inputs: [] },
  { type: 'error', name: 'FeeTooHigh', inputs: [] },
  { type: 'error', name: 'InvalidFee', inputs: [] },
  { type: 'error', name: 'OnlyContractOwner', inputs: [] },
  { type: 'error', name: 'ZeroAddress', inputs: [] },
  { type: 'error', name: 'CalldataEmptyButInitNotZero', inputs: [] },
  { type: 'error', name: 'FacetAddressIsNotZero', inputs: [] },
  { type: 'error', name: 'FacetAddressIsZero', inputs: [] },
  { type: 'error', name: 'FacetContainsNoCode', inputs: [] },
  { type: 'error', name: 'FunctionAlreadyExists', inputs: [] },
  { type: 'error', name: 'FunctionDoesNotExist', inputs: [] },
  { type: 'error', name: 'FunctionIsImmutable', inputs: [] },
  { type: 'error', name: 'IncorrectFacetCutAction', inputs: [] },
  {
    type: 'error',
    name: 'InitReverted',
    inputs: [{ type: 'bytes', name: 'reason' }],
  },
  { type: 'error', name: 'InitZeroButCalldataNotEmpty', inputs: [] },
  { type: 'error', name: 'NoSelectorsInFace', inputs: [] },
  { type: 'error', name: 'ZeroAddress', inputs: [] },
  { type: 'error', name: 'FeeTooHigh', inputs: [] },
  { type: 'error', name: 'IntegratorNotActive', inputs: [] },
  { type: 'error', name: 'IntegratorNotAllowed', inputs: [] },
  { type: 'error', name: 'ShareTooHigh', inputs: [] },
  { type: 'error', name: 'UnAuthorized', inputs: [] },
  { type: 'error', name: 'ZeroAddress', inputs: [] },
  { type: 'error', name: 'OnlyContractOwner', inputs: [] },
  { type: 'error', name: 'AllSwapsFailed', inputs: [] },
  { type: 'error', name: 'ContractCallNotAllowed', inputs: [] },
  {
    type: 'error',
    name: 'InsufficientBalance',
    inputs: [
      { type: 'uint256', name: 'amount' },
      { type: 'uint256', name: 'contractBalance' },
    ],
  },
  { type: 'error', name: 'IntegratorNotAllowed', inputs: [] },
  { type: 'error', name: 'InvalidAmount', inputs: [] },
  { type: 'error', name: 'InvalidContract', inputs: [] },
  { type: 'error', name: 'InvalidPermit', inputs: [] },
  { type: 'error', name: 'InvalidPermitData', inputs: [] },
  { type: 'error', name: 'NativeTransferFailed', inputs: [] },
  { type: 'error', name: 'NoSwapFromZeroBalance', inputs: [] },
  { type: 'error', name: 'NoTransferToNullAddress', inputs: [] },
  { type: 'error', name: 'NullAddrIsNotAValidSpender', inputs: [] },
  { type: 'error', name: 'NullAddrIsNotAnERC20Token', inputs: [] },
  {
    type: 'error',
    name: 'SlippageTooLow',
    inputs: [
      { type: 'uint256', name: 'minAmount' },
      { type: 'uint256', name: 'returnAmount' },
    ],
  },
  {
    type: 'error',
    name: 'SwapCallFailed',
    inputs: [{ type: 'bytes', name: 'reason' }],
  },
  { type: 'error', name: 'ZeroAddress', inputs: [] },
  {
    type: 'error',
    name: 'InsufficientBalance',
    inputs: [
      { type: 'uint256', name: 'amount' },
      { type: 'uint256', name: 'contractBalance' },
    ],
  },
  { type: 'error', name: 'NativeTransferFailed', inputs: [] },
  { type: 'error', name: 'NoTransferToNullAddress', inputs: [] },
  { type: 'error', name: 'NotAContract', inputs: [] },
  { type: 'error', name: 'NullAddrIsNotAnERC20Token', inputs: [] },
  { type: 'error', name: 'ReentrancyError', inputs: [] },
  { type: 'error', name: 'UnAuthorized', inputs: [] },
  { type: 'error', name: 'WithdrawFailed', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    name: 'ExecutionAllowed',
    inputs: [
      { type: 'address', name: 'account', indexed: true },
      { type: 'bytes4', name: 'method', indexed: true },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'ExecutionDenied',
    inputs: [
      { type: 'address', name: 'account', indexed: true },
      { type: 'bytes4', name: 'method', indexed: true },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'BatchBridgeTransferStart',
    inputs: [
      { type: 'bytes32', name: 'transactionId' },
      { type: 'address', name: 'integrator' },
      { type: 'address', name: 'sender', indexed: true },
      {
        type: 'tuple[]',
        name: 'bridgeData',
        components: [
          { type: 'string', name: 'bridge', indexed: false },
          { type: 'bytes', name: 'to', indexed: false },
          { type: 'bytes', name: 'receiver', indexed: false },
          { type: 'address', name: 'from', indexed: false },
          { type: 'bool', name: 'hasSourceSwaps', indexed: false },
          { type: 'bool', name: 'hasDestinationCall', indexed: false },
          { type: 'uint256', name: 'minAmountIn', indexed: false },
          { type: 'uint256', name: 'destinationChainId', indexed: false },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'BridgeTransferStarted',
    inputs: [
      { type: 'bytes32', name: 'transactionId' },
      { type: 'address', name: 'integrator', indexed: true },
      { type: 'address', name: 'sender', indexed: true },
      {
        type: 'tuple',
        name: 'bridgeData',
        components: [
          { type: 'string', name: 'bridge', indexed: false },
          { type: 'bytes', name: 'to', indexed: false },
          { type: 'bytes', name: 'receiver', indexed: false },
          { type: 'address', name: 'from', indexed: false },
          { type: 'bool', name: 'hasSourceSwaps', indexed: false },
          { type: 'bool', name: 'hasDestinationCall', indexed: false },
          { type: 'uint256', name: 'minAmountIn', indexed: false },
          { type: 'uint256', name: 'destinationChainId', indexed: false },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'MultiTokenBridgeTransferStarted',
    inputs: [
      { type: 'bytes32', name: 'transactionId' },
      { type: 'address', name: 'integrator', indexed: true },
      { type: 'address', name: 'sender', indexed: true },
      {
        type: 'tuple[]',
        name: 'bridgeData',
        components: [
          { type: 'string', name: 'bridge', indexed: false },
          { type: 'bytes', name: 'to', indexed: false },
          { type: 'bytes', name: 'receiver', indexed: false },
          { type: 'address', name: 'from', indexed: false },
          { type: 'bool', name: 'hasSourceSwaps', indexed: false },
          { type: 'bool', name: 'hasDestinationCall', indexed: false },
          { type: 'uint256', name: 'minAmountIn', indexed: false },
          { type: 'uint256', name: 'destinationChainId', indexed: false },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'BridgeAdded',
    inputs: [{ type: 'address[]', name: 'bridges' }],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'BridgeRemoved',
    inputs: [{ type: 'address[]', name: 'bridges' }],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'SelectorToInfoUpdated',
    inputs: [
      { type: 'address[]', name: 'bridges' },
      { type: 'bytes4[]', name: 'selectors' },
      { type: 'uint256[]', name: 'info' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'SwapBridgeTransferStarted',
    inputs: [
      { type: 'bytes32', name: 'transactionId' },
      { type: 'address', name: 'integrator', indexed: true },
      { type: 'address', name: 'sender', indexed: true },
      {
        type: 'tuple[]',
        name: 'bridgeData',
        components: [
          { type: 'string', name: 'bridge', indexed: false },
          { type: 'bytes', name: 'to', indexed: false },
          { type: 'bytes', name: 'receiver', indexed: false },
          { type: 'address', name: 'from', indexed: false },
          { type: 'bool', name: 'hasSourceSwaps', indexed: false },
          { type: 'bool', name: 'hasDestinationCall', indexed: false },
          { type: 'uint256', name: 'minAmountIn', indexed: false },
          { type: 'uint256', name: 'destinationChainId', indexed: false },
        ],
      },
      {
        type: 'tuple[]',
        name: 'swapInfo',
        components: [
          { type: 'address', name: 'dex', indexed: false },
          { type: 'address', name: 'fromToken', indexed: false },
          { type: 'address', name: 'toToken', indexed: false },
          { type: 'uint256', name: 'fromAmount', indexed: false },
          { type: 'uint256', name: 'leftOverFromAmount', indexed: false },
          { type: 'uint256', name: 'returnToAmount', indexed: false },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'DexAdded',
    inputs: [{ type: 'address', name: 'dexAddress', indexed: true }],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'DexRemoved',
    inputs: [{ type: 'address', name: 'dexAddress', indexed: true }],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'FunctionSignatureApprovalChanged',
    inputs: [
      { type: 'address', name: 'dex', indexed: true },
      { type: 'bytes4', name: 'functionSignature', indexed: true },
      { type: 'bool', name: 'approved', indexed: true },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'DiamondCut',
    inputs: [
      {
        type: 'tuple[]',
        name: '_diamondCut',
        components: [
          { type: 'address', name: 'facetAddress', indexed: false },
          { type: 'uint8', name: 'action', indexed: false },
          { type: 'bytes4[]', name: 'functionSelectors', indexed: false },
        ],
      },
      { type: 'address', name: '_init' },
      { type: 'bytes', name: '_calldata' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'SetDzapFixedNativeFeeAmount',
    inputs: [{ type: 'uint256', name: 'fee' }],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'SetDzapTokenFee',
    inputs: [{ type: 'uint256', name: 'fee' }],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'SetFixedNativeFee',
    inputs: [{ type: 'uint256', name: 'fee' }],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'SetIntegrator',
    inputs: [
      { type: 'address', name: 'integrator' },
      { type: 'uint8[]', name: 'feeType' },
      {
        type: 'tuple[]',
        name: 'info',
        components: [
          { type: 'uint256', name: 'tokenFee', indexed: false },
          {
            type: 'uint256',
            name: 'fixedNativeFeeAmount',
            indexed: false,
          },
          { type: 'uint256', name: 'dzapTokenShare', indexed: false },
          {
            type: 'uint256',
            name: 'dzapFixedNativeShare',
            indexed: false,
          },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'SetMaxPlatformFee',
    inputs: [{ type: 'uint256', name: 'fee' }],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'SetPlatformFee',
    inputs: [{ type: 'uint256', name: 'fee' }],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'OwnershipTransferred',
    inputs: [
      { type: 'address', name: 'previousOwner', indexed: true },
      { type: 'address', name: 'newOwner', indexed: true },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'MultiSwapped',
    inputs: [
      { type: 'bytes32', name: 'transactionId' },
      { type: 'address', name: 'integrator', indexed: true },
      { type: 'address', name: 'sender', indexed: true },
      { type: 'address', name: 'recipient' },
      {
        type: 'tuple[]',
        name: 'swapInfo',
        components: [
          { type: 'address', name: 'dex', indexed: false },
          { type: 'address', name: 'fromToken', indexed: false },
          { type: 'address', name: 'toToken', indexed: false },
          { type: 'uint256', name: 'fromAmount', indexed: false },
          { type: 'uint256', name: 'leftOverFromAmount', indexed: false },
          { type: 'uint256', name: 'returnToAmount', indexed: false },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'Swapped',
    inputs: [
      { type: 'bytes32', name: 'transactionId' },
      { type: 'address', name: 'integrator', indexed: true },
      { type: 'address', name: 'sender', indexed: true },
      { type: 'address', name: 'recipient' },
      {
        type: 'tuple',
        name: 'swapInfo',
        components: [
          { type: 'address', name: 'dex', indexed: false },
          { type: 'address', name: 'fromToken', indexed: false },
          { type: 'address', name: 'toToken', indexed: false },
          { type: 'uint256', name: 'fromAmount', indexed: false },
          { type: 'uint256', name: 'leftOverFromAmount', indexed: false },
          { type: 'uint256', name: 'returnToAmount', indexed: false },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'SwappedSingleToken',
    inputs: [
      { type: 'bytes32', name: 'transactionId' },
      { type: 'address', name: 'sender', indexed: true },
      { type: 'address', name: 'recipient' },
      {
        type: 'tuple',
        name: 'swapInfo',
        components: [
          { type: 'address', name: 'dex', indexed: false },
          { type: 'address', name: 'fromToken', indexed: false },
          { type: 'address', name: 'toToken', indexed: false },
          { type: 'uint256', name: 'fromAmount', indexed: false },
          { type: 'uint256', name: 'leftOverFromAmount', indexed: false },
          { type: 'uint256', name: 'returnToAmount', indexed: false },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'LogWithdraw',
    inputs: [
      { type: 'address', name: 'tokenAddress', indexed: true },
      { type: 'address', name: 'to' },
      { type: 'uint256', name: 'amount' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'BridgeTransferStarted',
    inputs: [
      { type: 'bytes32', name: 'transactionId' },
      { type: 'address', name: 'integrator', indexed: true },
      { type: 'address', name: 'sender', indexed: true },
      {
        type: 'tuple',
        name: 'bridgeData',
        components: [
          { type: 'string', name: 'bridge', indexed: false },
          { type: 'bytes', name: 'to', indexed: false },
          { type: 'bytes', name: 'receiver', indexed: false },
          { type: 'address', name: 'from', indexed: false },
          { type: 'bool', name: 'hasSourceSwaps', indexed: false },
          { type: 'bool', name: 'hasDestinationCall', indexed: false },
          { type: 'uint256', name: 'minAmountIn', indexed: false },
          { type: 'uint256', name: 'destinationChainId', indexed: false },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    name: 'MultiTokenBridgeTransferStarted',
    inputs: [
      { type: 'bytes32', name: 'transactionId' },
      { type: 'address', name: 'integrator', indexed: true },
      { type: 'address', name: 'sender', indexed: true },
      {
        type: 'tuple[]',
        name: 'bridgeData',
        components: [
          { type: 'string', name: 'bridge', indexed: false },
          { type: 'bytes', name: 'to', indexed: false },
          { type: 'bytes', name: 'receiver', indexed: false },
          { type: 'address', name: 'from', indexed: false },
          { type: 'bool', name: 'hasSourceSwaps', indexed: false },
          { type: 'bool', name: 'hasDestinationCall', indexed: false },
          { type: 'uint256', name: 'minAmountIn', indexed: false },
          { type: 'uint256', name: 'destinationChainId', indexed: false },
        ],
      },
    ],
  },
  {
    type: 'function',
    name: 'addressCanExecuteMethod',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [
      { type: 'bytes4', name: '_selector' },
      { type: 'address', name: '_executor' },
    ],
    outputs: [{ type: 'bool' }],
  },
  {
    type: 'function',
    name: 'setBatchCanExecute',
    constant: false,
    payable: false,
    inputs: [
      { type: 'bytes4[]', name: '_selector' },
      { type: 'address[]', name: '_executor' },
      { type: 'bool[]', name: '_canExecute' },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'setCanExecute',
    constant: false,
    payable: false,
    inputs: [
      { type: 'bytes4', name: '_selector' },
      { type: 'address', name: '_executor' },
      { type: 'bool', name: '_canExecute' },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'batchBridgeCall',
    constant: false,
    stateMutability: 'payable',
    payable: true,
    inputs: [
      { type: 'bytes32', name: '_transactionId' },
      { type: 'address', name: '_integrator' },
      {
        type: 'tuple[]',
        name: '_crossChainData',
        components: [
          { type: 'address', name: 'callTo' },
          { type: 'address', name: 'approveTo' },
          { type: 'uint256', name: 'extraNative' },
          { type: 'bytes', name: 'permit' },
          { type: 'bytes', name: 'callData' },
        ],
      },
      {
        type: 'tuple[]',
        name: '_bridgeData',
        components: [
          { type: 'string', name: 'bridge' },
          { type: 'bytes', name: 'to' },
          { type: 'bytes', name: 'receiver' },
          { type: 'address', name: 'from' },
          { type: 'bool', name: 'hasSourceSwaps' },
          { type: 'bool', name: 'hasDestinationCall' },
          { type: 'uint256', name: 'minAmountIn' },
          { type: 'uint256', name: 'destinationChainId' },
        ],
      },
      {
        type: 'tuple[]',
        name: '_transferData',
        components: [
          { type: 'address', name: 'transferTo' },
          { type: 'bytes', name: 'permit' },
        ],
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'addAggregatorsAndBridges',
    constant: false,
    payable: false,
    inputs: [{ type: 'address[]', name: '_bridgeAddresses' }],
    outputs: [],
  },
  {
    type: 'function',
    name: 'getSelectorInfo',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [
      { type: 'address', name: '_bridge' },
      { type: 'bytes4', name: '_selector' },
    ],
    outputs: [{ type: 'bool' }, { type: 'uint256' }],
  },
  {
    type: 'function',
    name: 'isWhitelisted',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [{ type: 'address', name: '_bridge' }],
    outputs: [{ type: 'bool' }],
  },
  {
    type: 'function',
    name: 'removeAggregatorsAndBridges',
    constant: false,
    payable: false,
    inputs: [{ type: 'address[]', name: '_bridgeAddresses' }],
    outputs: [],
  },
  {
    type: 'function',
    name: 'updateSelectorInfo',
    constant: false,
    payable: false,
    inputs: [
      { type: 'address[]', name: '_bridgeAddresses' },
      { type: 'bytes4[]', name: '_selectors' },
      { type: 'uint256[]', name: '_offset' },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'bridge',
    constant: false,
    stateMutability: 'payable',
    payable: true,
    inputs: [
      { type: 'bytes32', name: '_transactionId' },
      { type: 'address', name: '_integrator' },
      {
        type: 'tuple',
        name: '_bridgeData',
        components: [
          { type: 'string', name: 'bridge' },
          { type: 'bytes', name: 'to' },
          { type: 'bytes', name: 'receiver' },
          { type: 'address', name: 'from' },
          { type: 'bool', name: 'hasSourceSwaps' },
          { type: 'bool', name: 'hasDestinationCall' },
          { type: 'uint256', name: 'minAmountIn' },
          { type: 'uint256', name: 'destinationChainId' },
        ],
      },
      {
        type: 'tuple',
        name: '_genericData',
        components: [
          { type: 'address', name: 'callTo' },
          { type: 'address', name: 'approveTo' },
          { type: 'uint256', name: 'extraNative' },
          { type: 'bytes', name: 'permit' },
          { type: 'bytes', name: 'callData' },
        ],
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'bridgeMultipleTokens',
    constant: false,
    stateMutability: 'payable',
    payable: true,
    inputs: [
      { type: 'bytes32', name: '_transactionId' },
      { type: 'address', name: '_integrator' },
      {
        type: 'tuple[]',
        name: '_bridgeData',
        components: [
          { type: 'string', name: 'bridge' },
          { type: 'bytes', name: 'to' },
          { type: 'bytes', name: 'receiver' },
          { type: 'address', name: 'from' },
          { type: 'bool', name: 'hasSourceSwaps' },
          { type: 'bool', name: 'hasDestinationCall' },
          { type: 'uint256', name: 'minAmountIn' },
          { type: 'uint256', name: 'destinationChainId' },
        ],
      },
      {
        type: 'tuple[]',
        name: '_genericData',
        components: [
          { type: 'address', name: 'callTo' },
          { type: 'address', name: 'approveTo' },
          { type: 'uint256', name: 'extraNative' },
          { type: 'bytes', name: 'permit' },
          { type: 'bytes', name: 'callData' },
        ],
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'swapAndBridge',
    constant: false,
    stateMutability: 'payable',
    payable: true,
    inputs: [
      { type: 'bytes32', name: '_transactionId' },
      { type: 'address', name: '_integrator' },
      {
        type: 'tuple[]',
        name: '_bridgeData',
        components: [
          { type: 'string', name: 'bridge' },
          { type: 'bytes', name: 'to' },
          { type: 'bytes', name: 'receiver' },
          { type: 'address', name: 'from' },
          { type: 'bool', name: 'hasSourceSwaps' },
          { type: 'bool', name: 'hasDestinationCall' },
          { type: 'uint256', name: 'minAmountIn' },
          { type: 'uint256', name: 'destinationChainId' },
        ],
      },
      {
        type: 'tuple[]',
        name: '_swapData',
        components: [
          { type: 'address', name: 'callTo' },
          { type: 'address', name: 'approveTo' },
          { type: 'address', name: 'from' },
          { type: 'address', name: 'to' },
          { type: 'uint256', name: 'fromAmount' },
          { type: 'uint256', name: 'minToAmount' },
          { type: 'bytes', name: 'swapCallData' },
          { type: 'bytes', name: 'permit' },
        ],
      },
      {
        type: 'tuple[]',
        name: '_genericData',
        components: [
          { type: 'address', name: 'callTo' },
          { type: 'address', name: 'approveTo' },
          { type: 'uint256', name: 'extraNative' },
          { type: 'bytes', name: 'permit' },
          { type: 'bytes', name: 'callData' },
        ],
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'addDex',
    constant: false,
    payable: false,
    inputs: [{ type: 'address', name: '_dex' }],
    outputs: [],
  },
  {
    type: 'function',
    name: 'batchAddDex',
    constant: false,
    payable: false,
    inputs: [{ type: 'address[]', name: '_dexs' }],
    outputs: [],
  },
  {
    type: 'function',
    name: 'batchRemoveDex',
    constant: false,
    payable: false,
    inputs: [{ type: 'address[]', name: '_dexs' }],
    outputs: [],
  },
  {
    type: 'function',
    name: 'batchSetFunctionApprovalBySignature',
    constant: false,
    payable: false,
    inputs: [
      { type: 'address[]', name: '_dexs' },
      { type: 'bytes4[]', name: '_signatures' },
      { type: 'bool[]', name: '_approval' },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'isContractApproved',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [{ type: 'address', name: '_dex' }],
    outputs: [{ type: 'bool', name: 'approved' }],
  },
  {
    type: 'function',
    name: 'isFunctionApproved',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [
      { type: 'address', name: '_dex' },
      { type: 'bytes4', name: '_signature' },
    ],
    outputs: [{ type: 'bool', name: 'approved' }],
  },
  {
    type: 'function',
    name: 'removeDex',
    constant: false,
    payable: false,
    inputs: [{ type: 'address', name: '_dex' }],
    outputs: [],
  },
  {
    type: 'function',
    name: 'setFunctionApprovalBySignature',
    constant: false,
    payable: false,
    inputs: [
      { type: 'address', name: '_dex' },
      { type: 'bytes4', name: '_signature' },
      { type: 'bool', name: '_approval' },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'diamondCut',
    constant: false,
    payable: false,
    inputs: [
      {
        type: 'tuple[]',
        name: '_diamondCut',
        components: [
          { type: 'address', name: 'facetAddress' },
          { type: 'uint8', name: 'action' },
          { type: 'bytes4[]', name: 'functionSelectors' },
        ],
      },
      { type: 'address', name: '_init' },
      { type: 'bytes', name: '_calldata' },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'initialize',
    constant: false,
    payable: false,
    inputs: [
      { type: 'address', name: '_permit2' },
      { type: 'address', name: '_protocolFeeVault' },
      { type: 'uint256', name: '_maxTokenFee' },
      { type: 'uint256', name: '_maxFixedNativeFeeAmount' },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'facetAddress',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [{ type: 'bytes4', name: '_functionSelector' }],
    outputs: [{ type: 'address', name: 'facetAddress_' }],
  },
  {
    type: 'function',
    name: 'facetAddresses',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [],
    outputs: [{ type: 'address[]', name: 'facetAddresses_' }],
  },
  {
    type: 'function',
    name: 'facetFunctionSelectors',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [{ type: 'address', name: '_facet' }],
    outputs: [{ type: 'bytes4[]', name: 'facetFunctionSelectors_' }],
  },
  {
    type: 'function',
    name: 'facets',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [],
    outputs: [
      {
        type: 'tuple[]',
        name: 'facets_',
        components: [
          { type: 'address', name: 'facetAddress' },
          { type: 'bytes4[]', name: 'functionSelectors' },
        ],
      },
    ],
  },
  {
    type: 'function',
    name: 'supportsInterface',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [{ type: 'bytes4', name: '_interfaceId' }],
    outputs: [{ type: 'bool' }],
  },
  {
    type: 'constructor',
    stateMutability: 'payable',
    payable: true,
    inputs: [
      { type: 'address', name: '_contractOwner' },
      { type: 'address', name: '_diamondCutFacet' },
    ],
  },
  {
    type: 'function',
    name: 'calcFixedNativeFees',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [
      { type: 'address', name: '_integrator' },
      { type: 'uint8', name: '_feeType' },
    ],
    outputs: [
      { type: 'uint256', name: 'fixedNativeFeeAmount' },
      { type: 'uint256', name: 'dzapShare' },
    ],
  },
  {
    type: 'function',
    name: 'calcTokenFees',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [
      { type: 'address', name: '_integrator' },
      { type: 'uint8', name: '_feeType' },
      { type: 'uint256', name: '_amount' },
    ],
    outputs: [
      { type: 'uint256', name: 'totalFee' },
      { type: 'uint256', name: 'dzapShare' },
    ],
  },
  {
    type: 'function',
    name: 'integratorFeeInfo',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [
      { type: 'address', name: '_integrator' },
      { type: 'uint8', name: '_feeType' },
    ],
    outputs: [
      {
        type: 'tuple',
        components: [
          { type: 'uint256', name: 'tokenFee' },
          { type: 'uint256', name: 'fixedNativeFeeAmount' },
          { type: 'uint256', name: 'dzapTokenShare' },
          { type: 'uint256', name: 'dzapFixedNativeShare' },
        ],
      },
    ],
  },
  {
    type: 'function',
    name: 'isIntegratorAllowed',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [{ type: 'address', name: '_integrator' }],
    outputs: [{ type: 'bool' }],
  },
  {
    type: 'function',
    name: 'maxFixedNativeFeeAmount',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [],
    outputs: [{ type: 'uint256', name: '_maxFixedNativeFee' }],
  },
  {
    type: 'function',
    name: 'maxTokenFee',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [],
    outputs: [{ type: 'uint256' }],
  },
  {
    type: 'function',
    name: 'protocolFeeVault',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [],
    outputs: [{ type: 'address' }],
  },
  {
    type: 'function',
    name: 'removeIntegrator',
    constant: false,
    payable: false,
    inputs: [{ type: 'address', name: '_integrator' }],
    outputs: [],
  },
  {
    type: 'function',
    name: 'setIntegratorInfo',
    constant: false,
    payable: false,
    inputs: [
      { type: 'address', name: '_integrator' },
      { type: 'uint8[]', name: '_feeTypes' },
      {
        type: 'tuple[]',
        name: '_feeInfo',
        components: [
          { type: 'uint256', name: 'tokenFee' },
          { type: 'uint256', name: 'fixedNativeFeeAmount' },
          { type: 'uint256', name: 'dzapTokenShare' },
          { type: 'uint256', name: 'dzapFixedNativeShare' },
        ],
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'setProtocolFeeVault',
    constant: false,
    payable: false,
    inputs: [{ type: 'address', name: '_protocolFeeVault' }],
    outputs: [],
  },
  {
    type: 'function',
    name: 'owner',
    constant: true,
    stateMutability: 'view',
    payable: false,
    inputs: [],
    outputs: [{ type: 'address', name: 'owner_' }],
  },
  {
    type: 'function',
    name: 'transferOwnership',
    constant: false,
    payable: false,
    inputs: [{ type: 'address', name: '_newOwner' }],
    outputs: [],
  },
  {
    type: 'function',
    name: 'multiSwap',
    constant: false,
    stateMutability: 'payable',
    payable: true,
    inputs: [
      { type: 'bytes32', name: '_transactionId' },
      { type: 'address', name: '_integrator' },
      { type: 'address', name: '_recipient' },
      {
        type: 'tuple[]',
        name: '_data',
        components: [
          { type: 'address', name: 'callTo' },
          { type: 'address', name: 'approveTo' },
          { type: 'address', name: 'from' },
          { type: 'address', name: 'to' },
          { type: 'uint256', name: 'fromAmount' },
          { type: 'uint256', name: 'minToAmount' },
          { type: 'bytes', name: 'swapCallData' },
          { type: 'bytes', name: 'permit' },
        ],
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'multiSwapWithoutRevert',
    constant: false,
    stateMutability: 'payable',
    payable: true,
    inputs: [
      { type: 'bytes32', name: '_transactionId' },
      { type: 'address', name: '_integrator' },
      { type: 'address', name: '_recipient' },
      {
        type: 'tuple[]',
        name: '_data',
        components: [
          { type: 'address', name: 'callTo' },
          { type: 'address', name: 'approveTo' },
          { type: 'address', name: 'from' },
          { type: 'address', name: 'to' },
          { type: 'uint256', name: 'fromAmount' },
          { type: 'uint256', name: 'minToAmount' },
          { type: 'bytes', name: 'swapCallData' },
          { type: 'bytes', name: 'permit' },
        ],
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'swap',
    constant: false,
    stateMutability: 'payable',
    payable: true,
    inputs: [
      { type: 'bytes32', name: '_transactionId' },
      { type: 'address', name: '_integrator' },
      { type: 'address', name: '_recipient' },
      {
        type: 'tuple',
        name: '_data',
        components: [
          { type: 'address', name: 'callTo' },
          { type: 'address', name: 'approveTo' },
          { type: 'address', name: 'from' },
          { type: 'address', name: 'to' },
          { type: 'uint256', name: 'fromAmount' },
          { type: 'uint256', name: 'minToAmount' },
          { type: 'bytes', name: 'swapCallData' },
          { type: 'bytes', name: 'permit' },
        ],
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'swapErc20ToEc20',
    constant: false,
    payable: false,
    inputs: [
      { type: 'bytes32', name: '_transactionId' },
      { type: 'address', name: '_recipient' },
      {
        type: 'tuple',
        name: '_data',
        components: [
          { type: 'address', name: 'callTo' },
          { type: 'address', name: 'approveTo' },
          { type: 'address', name: 'from' },
          { type: 'address', name: 'to' },
          { type: 'uint256', name: 'fromAmount' },
          { type: 'uint256', name: 'minToAmount' },
          { type: 'bytes', name: 'swapCallData' },
          { type: 'bytes', name: 'permit' },
        ],
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'swapErc20ToNative',
    constant: false,
    payable: false,
    inputs: [
      { type: 'bytes32', name: '_transactionId' },
      { type: 'address', name: '_recipient' },
      {
        type: 'tuple',
        name: '_data',
        components: [
          { type: 'address', name: 'callTo' },
          { type: 'address', name: 'approveTo' },
          { type: 'address', name: 'from' },
          { type: 'address', name: 'to' },
          { type: 'uint256', name: 'fromAmount' },
          { type: 'uint256', name: 'minToAmount' },
          { type: 'bytes', name: 'swapCallData' },
          { type: 'bytes', name: 'permit' },
        ],
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'swapNativeToErc20',
    constant: false,
    stateMutability: 'payable',
    payable: true,
    inputs: [
      { type: 'bytes32', name: '_transactionId' },
      { type: 'address', name: '_recipient' },
      {
        type: 'tuple',
        name: '_data',
        components: [
          { type: 'address', name: 'callTo' },
          { type: 'address', name: 'approveTo' },
          { type: 'address', name: 'from' },
          { type: 'address', name: 'to' },
          { type: 'uint256', name: 'fromAmount' },
          { type: 'uint256', name: 'minToAmount' },
          { type: 'bytes', name: 'swapCallData' },
          { type: 'bytes', name: 'permit' },
        ],
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'executeCallAndWithdraw',
    constant: false,
    payable: false,
    inputs: [
      { type: 'address', name: '_callTo' },
      { type: 'bytes', name: '_callData' },
      { type: 'address', name: '_token' },
      { type: 'address', name: '_to' },
      { type: 'uint256', name: '_amount' },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'withdraw',
    constant: false,
    payable: false,
    inputs: [
      { type: 'address', name: '_token' },
      { type: 'address', name: '_to' },
      { type: 'uint256', name: '_amount' },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'bridgeMultipleTokensViaTransfer',
    constant: false,
    stateMutability: 'payable',
    payable: true,
    inputs: [
      { type: 'bytes32', name: '_transactionId' },
      { type: 'address', name: '_integrator' },
      {
        type: 'tuple[]',
        name: '_bridgeData',
        components: [
          { type: 'string', name: 'bridge' },
          { type: 'bytes', name: 'to' },
          { type: 'bytes', name: 'receiver' },
          { type: 'address', name: 'from' },
          { type: 'bool', name: 'hasSourceSwaps' },
          { type: 'bool', name: 'hasDestinationCall' },
          { type: 'uint256', name: 'minAmountIn' },
          { type: 'uint256', name: 'destinationChainId' },
        ],
      },
      {
        type: 'tuple[]',
        name: '_transferData',
        components: [
          { type: 'address', name: 'transferTo' },
          { type: 'bytes', name: 'permit' },
        ],
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'bridgeViaTransfer',
    constant: false,
    stateMutability: 'payable',
    payable: true,
    inputs: [
      { type: 'bytes32', name: '_transactionId' },
      { type: 'address', name: '_integrator' },
      {
        type: 'tuple',
        name: '_bridgeData',
        components: [
          { type: 'string', name: 'bridge' },
          { type: 'bytes', name: 'to' },
          { type: 'bytes', name: 'receiver' },
          { type: 'address', name: 'from' },
          { type: 'bool', name: 'hasSourceSwaps' },
          { type: 'bool', name: 'hasDestinationCall' },
          { type: 'uint256', name: 'minAmountIn' },
          { type: 'uint256', name: 'destinationChainId' },
        ],
      },
      {
        type: 'tuple',
        name: '_transferData',
        components: [
          { type: 'address', name: 'transferTo' },
          { type: 'bytes', name: 'permit' },
        ],
      },
    ],
    outputs: [],
  },
] as unknown as Abi;
