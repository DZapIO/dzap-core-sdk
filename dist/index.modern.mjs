import e from"axios";import{ethers as t,utils as n,BigNumber as a}from"ethers";import{Contract as r}from"zksync-web3";const s={"v1.2":{1:"0x3af3cc4930ef88F4afe0b695Ac95C230E1A108Ec",137:"0x3af3cc4930ef88F4afe0b695Ac95C230E1A108Ec",56:"0x3af3cc4930ef88F4afe0b695Ac95C230E1A108Ec",42161:"0x3af3cc4930ef88F4afe0b695Ac95C230E1A108Ec",abi:["constructor(uint256[3] fees_, address[] routers_, tuple(bool isSupported, uint256 fees)[] routerDetails_, address governor_, address aggregationRouter_, address wNative_, address protocolFeeVault_, address feeDiscountNft_)","event GovernanceChanged(address indexed formerGov, address indexed newGov)","event LiquidityAdded(address indexed sender, address indexed recipient, tuple(address token, uint256 amount)[] inputTokens, address outputLp, uint256[3] returnAmounts, uint256[2] feeBps)","event LpSwapped(address indexed sender, address indexed recipient, tuple(tuple(address token, uint256 amount)[] lpInput, tuple(address token, uint256 amount)[] lpOutput) swapInfo, uint256[2] feeBps)","event ProjectAdded(uint256 indexed id)","event ProjectFeeUpdated(uint256 indexed id)","event ProjectFeeVaultUpdated(uint256 indexed id)","event ProjectStatusDisabled(uint256 indexed id)","event ProtocolFeeUpdated()","event ProtocolFeeVaultUpdated()","event RoutersUpdated(address[] routers, tuple(bool isSupported, uint256 fees)[] details)","event TokensRescued(address indexed to, address indexed token, uint256 amount)","event TokensSwapped(address indexed sender, address indexed recipient, tuple(address srcToken, address dstToken, uint256 amount, uint256 returnAmount)[] swapInfo, uint256[2] feeBps)","event TokensTransferred(address indexed sender, tuple(address recipient, tuple(address token, uint256 amount)[] data)[] details, uint256[2] feeBps)","function AGGREGATION_ROUTER() view returns (address)","function BPS_DENOMINATOR() view returns (uint256)","function MAX_FEE() view returns (uint256)","function addProject(uint256[3] fees_, address feeVault_)","function batchTransfer(tuple(address recipient, tuple(address token, uint256 amount, bytes permit)[] data)[] data_, uint256 projectId_, uint256 nftId_) payable","function calculateOptimalSwapAmount(uint256 amountA_, uint256 amountB_, uint256 reserveA_, uint256 reserveB_, address router_) view returns (uint256)","function changeGovernance(address newGov_)","function disableProject(uint256 projectId_)","function feeDiscountNft() view returns (address)","function governance() view returns (address)","function nextProjectId() view returns (uint256)","function projectFeeBps(uint256, uint8) view returns (uint256)","function projectFeeVault(uint256) view returns (address)","function protocolFeeBps(uint8) view returns (uint256)","function protocolFeeVault() view returns (address)","function rescueFunds(address token_, address to_, uint256 amount_)","function routers(address) view returns (bool isSupported, uint256 fees)","function swapLpToTokens(tuple(address router, address token, uint256 amount, bytes permit, address[] tokenAToPath, address[] tokenBToPath)[] lpSwapDetails_, tuple(address router, uint256 sizeBps, uint256 minReturnAmount, address[] nativeToOutputPath)[] wEthSwapDetails_, address recipient_, uint256 projectId_, uint256 nftId_)","function swapTokensToLp(tuple(address executor, tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc, bytes routeData, bytes permit)[] data_, tuple(address router, address token, uint256 amount, bytes permit, address[] tokenAToPath, address[] tokenBToPath)[] lpSwapDetails_, tuple(address router, address lpToken, uint256 minReturnAmount, address[] nativeToToken0, address[] nativeToToken1) outputLpDetails_, address recipient_, uint256 projectId_, uint256 nftId_) payable","function swapTokensToTokens(tuple(address executor, tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc, bytes routeData, bytes permit)[] data_, address recipient_, uint256 projectId_, uint256 nftId_) payable","function unoSwapTokensToTokens(tuple(address router, uint256 amount, uint256 minReturnAmount, address[] path, bytes permit)[] swapData_, address recipient_, uint256 projectId_, uint256 nftId_) payable","function updateProjectFee(uint256 projectId_, uint8[] feeTypes_, uint256[] fees_)","function updateProjectFeeVault(uint256 projectId_, address feeVault_)","function updateProtocolFee(uint8[] feeTypes_, uint256[] fees_)","function updateProtocolFeeVault(address newProtocolFeeVault_)","function updateRouters(address[] routers_, tuple(bool isSupported, uint256 fees)[] routerDetails_)","function wNative() view returns (address)"]},v2:{137:"0x8cC264e741040a574f972b6688769584320bbb36",56:"0x8cC264e741040a574f972b6688769584320bbb36",10:"0x8cC264e741040a574f972b6688769584320bbb36",42161:"0x8cC264e741040a574f972b6688769584320bbb36",abi:[{inputs:[],name:"AllSwapsFailed",type:"error"},{inputs:[],name:"ContractCallNotAllowed",type:"error"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"contractBalance",type:"uint256"}],name:"InsufficientBalance",type:"error"},{inputs:[],name:"IntegratorNotAllowed",type:"error"},{inputs:[],name:"InvalidAmount",type:"error"},{inputs:[],name:"InvalidPermit",type:"error"},{inputs:[],name:"InvalidPermitData",type:"error"},{inputs:[],name:"NativeTransferFailed",type:"error"},{inputs:[],name:"NoSwapFromZeroBalance",type:"error"},{inputs:[],name:"NoTransferToNullAddress",type:"error"},{inputs:[],name:"NullAddrIsNotAValidSpender",type:"error"},{inputs:[],name:"NullAddrIsNotAnERC20Token",type:"error"},{inputs:[{internalType:"uint256",name:"leftOverAmount",type:"uint256"}],name:"PartialSwap",type:"error"},{inputs:[],name:"ReentrancyError",type:"error"},{inputs:[],name:"SliceOutOfBounds",type:"error"},{inputs:[],name:"SliceOverflow",type:"error"},{inputs:[{internalType:"uint256",name:"minAmount",type:"uint256"},{internalType:"uint256",name:"returnAmount",type:"uint256"}],name:"SlippageTooHigh",type:"error"},{inputs:[{internalType:"bytes",name:"reason",type:"bytes"}],name:"SwapCallFailed",type:"error"},{inputs:[],name:"ZeroAddress",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"transactionId",type:"bytes32"},{indexed:!0,internalType:"address",name:"integrator",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"address",name:"refundee",type:"address"},{indexed:!1,internalType:"address",name:"recipient",type:"address"},{components:[{internalType:"address",name:"dex",type:"address"},{internalType:"address",name:"fromToken",type:"address"},{internalType:"address",name:"toToken",type:"address"},{internalType:"uint256",name:"fromAmount",type:"uint256"},{internalType:"uint256",name:"leftOverFromAmount",type:"uint256"},{internalType:"uint256",name:"returnToAmount",type:"uint256"}],indexed:!1,internalType:"struct SwapInfo[]",name:"swapInfo",type:"tuple[]"}],name:"MultiSwapped",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"transactionId",type:"bytes32"},{indexed:!0,internalType:"address",name:"integrator",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"address",name:"refundee",type:"address"},{indexed:!1,internalType:"address",name:"recipient",type:"address"},{components:[{internalType:"address",name:"dex",type:"address"},{internalType:"address",name:"fromToken",type:"address"},{internalType:"address",name:"toToken",type:"address"},{internalType:"uint256",name:"fromAmount",type:"uint256"},{internalType:"uint256",name:"leftOverFromAmount",type:"uint256"},{internalType:"uint256",name:"returnToAmount",type:"uint256"}],indexed:!1,internalType:"struct SwapInfo",name:"swapInfo",type:"tuple"}],name:"Swapped",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"transactionId",type:"bytes32"},{indexed:!1,internalType:"address",name:"dex",type:"address"},{indexed:!1,internalType:"address",name:"fromAssetId",type:"address"},{indexed:!1,internalType:"address",name:"toAssetId",type:"address"},{indexed:!1,internalType:"uint256",name:"fromAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"toAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"leftoverFromAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"}],name:"SwappedTokens",type:"event"},{inputs:[{internalType:"bytes32",name:"_transactionId",type:"bytes32"},{internalType:"address",name:"_integrator",type:"address"},{internalType:"address",name:"_refundee",type:"address"},{internalType:"address",name:"_recipient",type:"address"},{components:[{internalType:"address",name:"callTo",type:"address"},{internalType:"address",name:"approveTo",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"fromAmount",type:"uint256"},{internalType:"uint256",name:"minToAmount",type:"uint256"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"bytes",name:"permit",type:"bytes"}],internalType:"struct SwapData[]",name:"_data",type:"tuple[]"}],name:"multiSwap",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes32",name:"_transactionId",type:"bytes32"},{internalType:"address",name:"_integrator",type:"address"},{internalType:"address",name:"_refundee",type:"address"},{internalType:"address",name:"_recipient",type:"address"},{components:[{internalType:"address",name:"callTo",type:"address"},{internalType:"address",name:"approveTo",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"fromAmount",type:"uint256"},{internalType:"uint256",name:"minToAmount",type:"uint256"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"bytes",name:"permit",type:"bytes"}],internalType:"struct SwapData[]",name:"_data",type:"tuple[]"}],name:"multiSwapWithoutRevert",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes32",name:"_transactionId",type:"bytes32"},{internalType:"address",name:"_integrator",type:"address"},{internalType:"address",name:"_refundee",type:"address"},{internalType:"address",name:"_recipient",type:"address"},{components:[{internalType:"address",name:"callTo",type:"address"},{internalType:"address",name:"approveTo",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"fromAmount",type:"uint256"},{internalType:"uint256",name:"minToAmount",type:"uint256"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"bytes",name:"permit",type:"bytes"}],internalType:"struct SwapData",name:"_data",type:"tuple"}],name:"swap",outputs:[],stateMutability:"payable",type:"function"}]}},d={dZap:{contract:"0x12480616436DD6D555f88B8d94bB5156E28825B1"}},i=(t,n,a)=>e({method:a||"post",url:`https://dzap-staging-v2-lqtpzlbt3q-lz.a.run.app/${t}`,data:n}).then(({data:e})=>e).catch(e=>Promise.reject(e)),p=(e,t,n)=>i("swap/params",{chainId:t,request:e,via:n});function o({chainId:e}){return{getQuoteRate:async t=>await((e,t)=>i("swap/quote",{chainId:t,request:e}))(t,e),getSwapParams:(t,n)=>p(t,e,n),getAllSupportedChains:()=>(e=>i("config/supported-chains",{chainId:e}))(e)}}const u=e=>e||"v2",y=a.from(15).div(10);function l({chainId:e,provider:a}){const i=n=>{try{return a=s[u(n)][e],t.utils.getAddress(a)}catch(e){throw new Error("Unsupported chainId")}var a},o=n=>{try{const d=u(n),p=s[d].abi;return 324===e?new r(i(d),p,a):new t.Contract(i(d),p,a)}catch(e){throw e}};return{swap:async({request:t,recipient:a,integrator:r,version:s},i)=>{try{const i=(e=>d[e]||d.dZap)(r),u=o(s),{swapDetails:l,value:m}=await p(t,e,r),c=[(e=>{const t=`${e.slice(0,6)}...${e.slice(36,42)}-${Date.now()}`;return console.log(t),n.formatBytes32String(t)})(a),i.contract,a,a,l];try{console.log("swap params",c);const e=await u.estimateGas.multiSwapWithoutRevert(...c,{value:m});return await u.multiSwapWithoutRevert(...c,{gasLimit:e.mul(y),value:m})}catch(e){throw{params:c,error:e}}}catch(e){throw{error:e}}},getContractAddress:i,getContract:o}}export{o as useClient,l as useContract};
